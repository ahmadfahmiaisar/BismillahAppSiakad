// Generated by Dagger (https://google.github.io/dagger).
package inn.mroyek.bismillahsiakad.di.module;

import android.app.Application;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class NetworkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<Application> appProvider;

  public NetworkModule_ProvideOkHttpClientFactory(Provider<Application> appProvider) {
    this.appProvider = appProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideInstance(appProvider);
  }

  public static OkHttpClient provideInstance(Provider<Application> appProvider) {
    return proxyProvideOkHttpClient(appProvider.get());
  }

  public static NetworkModule_ProvideOkHttpClientFactory create(Provider<Application> appProvider) {
    return new NetworkModule_ProvideOkHttpClientFactory(appProvider);
  }

  public static OkHttpClient proxyProvideOkHttpClient(Application app) {
    return Preconditions.checkNotNull(
        NetworkModule.provideOkHttpClient(app),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
